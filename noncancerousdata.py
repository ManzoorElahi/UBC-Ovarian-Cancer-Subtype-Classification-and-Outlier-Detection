{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":45867,"databundleVersionId":6924515,"sourceType":"competition"},{"sourceId":6774400,"sourceType":"datasetVersion","datasetId":3895136},{"sourceId":6984590,"sourceType":"datasetVersion","datasetId":4014175}],"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"            # https://www.kaggle.com/code/jirkaborovec/cancer-subtype-cut-wsi-tiles-mask-0-25x/notebook\n\n            # intall the deb packages\n            !dpkg -i --force-depends /packages/pyvips-python-and-deb-package/linux_packages/archives/*.deb\n            # install the python wrapper\n            !pip install pyvips -f /packages/pyvips-python-and-deb-package/python_packages/ --no-index\n\n            import pyvips\n            import numpy as np\n            import pandas as pd\n            import os, random, math, gc, cv2\n            import matplotlib.pyplot as plt\n            from sklearn.model_selection import GroupKFold, StratifiedKFold, KFold\n            import tensorflow as tf\n            from tqdm import tqdm\n            from PIL import Image\n\n            os.environ['VIPS_DISC_THRESHOLD'] = '9gb'\n\n            SEED=8677\n            random.seed(SEED)\n            os.environ['PYTHONHASHSEED'] = str(SEED)\n            np.random.seed(SEED)\n            tf.random.set_seed(SEED)\n\n            df_train = pd.read_csv('/data/ubcocean/train.csv')\n            df_train.head()\n\n            df_train['label'].value_counts()\n\n            df_train['is_tma'].value_counts()\n\n            label_map = {x:y for x,y in zip(df_train['image_id'].values,df_train['label'].values)}\n            subtype_map = {'CC':0, 'EC':1, 'HGSC':2, 'LGSC':3, 'MC':4}\n            file_names = [int(f.split('.')[0]) for f in os.listdir('/data/supplementalmasks')]\n            labels = [label_map[x] for x in file_names]\n            df_mask = pd.DataFrame({'image_id':file_names, 'label':labels})\n            df_mask['y'] = df_mask['label'].map(subtype_map)\n            df_mask.head()\n\n            df_mask = df_mask[25:50]\n\n            df_mask['label'].value_counts()\n\n            df_mask['y'].value_counts()\n\n            TILE_SIZE = 768\n            !mkdir /data/noncancerous\n\n            count = 0\n\n            image_ids = df_mask['image_id'].values\n            for img_id in tqdm(image_ids):\n                \n                tile_count = 0\n                \n                img_path = f'/data/ubcocean/{img_id}.png'\n                img = pyvips.Image.new_from_file(img_path).numpy()[:,:,:3]\n                h,w = img.shape[0], img.shape[1]\n                img = cv2.resize(img, (w//2, h//2), interpolation = cv2.INTER_CUBIC)\n                \n                msk_path = f'/data/supplementalmasks/{img_id}.png'\n                msk = pyvips.Image.new_from_file(msk_path).numpy()[:,:,:3]\n                msk = cv2.resize(msk, (w//2, h//2), interpolation = cv2.INTER_CUBIC)\n                \n                for i in range(0,768*(img.shape[0]//768),768):\n                    for j in range(0,768*(img.shape[1]//768),768):\n                        if tile_count > 5:\n                            continue\n                        if np.clip(msk[i:i+TILE_SIZE, j:j+TILE_SIZE,1:],0,1).sum() > 0.75*TILE_SIZE*TILE_SIZE:\n                            if np.clip(msk[i:i+TILE_SIZE, j:j+TILE_SIZE,0],0,1).sum() == 0:\n                                    \n                                with open(f'/data/noncancerous/{img_id}_{i}_{j}.npy', 'wb') as f:\n                                    np.save(f, img[i:i+TILE_SIZE, j:j+TILE_SIZE,:])\n\n                                tile_count += 1\n                                count += 1\n                            \n                                \n                del img, msk\n                gc.collect()","metadata":{"_uuid":"35c594ab-43c2-4a63-91cb-78f72cd205be","_cell_guid":"fa73a88a-280b-41c1-9d07-2f4e3ddbc637","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}